pipeline {
  agent any

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
  parameters {
    booleanParam(
      name: 'FORCE_BUILD',
      defaultValue: false,
      description: '–ï—Å–ª–∏ true ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ–±—Ä–∞—Ç—å/–∑–∞–¥–µ–ø–ª–æ–∏—Ç—å'
    )
  }

  environment {
    GIT_CREDENTIALS = 'TSSH'
    REPO_URL        = 'git@github.com:artyomchumachenko/jefferson-front.git'
    BRANCH          = 'master'
    WORK_TREE       = '/opt/myapp/frontend'
    DEPLOY_DIR      = '/var/www/myapp/mai/jefferson'
    NGINX_SERVICE   = 'nginx.service'
  }

  stages {
    stage('Checkout & Fetch') {
      steps {
        sshagent([env.GIT_CREDENTIALS]) {
          sh '''
            if [ ! -d "$WORK_TREE/.git" ]; then
              echo "[$(date)] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
              rm -rf "$WORK_TREE"
              git clone "$REPO_URL" --branch "$BRANCH" "$WORK_TREE"
            fi
            cd "$WORK_TREE"
            git fetch origin "$BRANCH"
          '''
        }
      }
    }

    stage('Check for Changes') {
      steps {
        dir("${WORK_TREE}") {
          script {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ —Å—Ç—Ä–æ–∏–º
            shouldBuild = false

            if (params.FORCE_BUILD) {
              echo "üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞: FORCE_BUILD=true"
              shouldBuild = true
            } else {
              def remote = sh(script: "git rev-parse origin/${BRANCH}", returnStdout: true).trim()
              def local  = sh(script: "git rev-parse HEAD",              returnStdout: true).trim()

              if (remote != local) {
                echo "üîÑ –ù–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã: ${local} ‚Üí ${remote}"
                sh "git reset --hard origin/${BRANCH}"
                shouldBuild = true
              } else {
                echo "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ (HEAD=${local}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º build/deploy"
              }
            }
          }
        }
      }
    }

    stage('Build') {
      when { expression { shouldBuild } }
      steps {
        dir("${WORK_TREE}") {
          sh '''
            echo "[$(date)] npm ci"
            npm ci
            echo "[$(date)] npm run build"
            npm run build
          '''
        }
      }
    }

    stage('Deploy') {
      when { expression { shouldBuild } }
      steps {
        sh '''
          echo "[$(date)] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${DEPLOY_DIR}"
          mkdir -p ${DEPLOY_DIR}
          rm -rf ${DEPLOY_DIR}/*

          echo "[$(date)] rsync dist ‚Üí deploy"
          rsync -a --delete ${WORK_TREE}/dist/ ${DEPLOY_DIR}/

          echo "[$(date)] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"
          if sudo nginx -t; then
            echo "[$(date)] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx"
            systemctl reload ${NGINX_SERVICE}
          else
            echo "[$(date)] ‚ùå –ö–æ–Ω—Ñ–∏–≥ nginx –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
            exit 1
          fi
        '''
      }
    }
  }

  post {
    success {
      script {
        if (shouldBuild) {
          echo '‚úÖ –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ'
        } else {
          echo '‚ÑπÔ∏è –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'
        }
      }
    }
    failure {
      echo '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏'
    }
  }
}
